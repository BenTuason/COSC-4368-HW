import math

def aStarAlgo(start_node, stop_node):
    open_set = set([start_node])
    closed_set = set()
    g = {}
    parents = {}

    g[start_node] = 0
    parents[start_node] = start_node

    while len(open_set) > 0:
        n = None

        for v in open_set:
            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v

        if n == stop_node:
            path = []
            total_cost = g[n]
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start_node)
            path.reverse()

            print(f"Path found: {path}")
            print(f"Total travel time: {total_cost} minutes")
            return path, total_cost

        if n is None:
            print("Path does not exist.")
            return None, None

        for (m, weight) in get_neighbors(n):
            if m not in open_set and m not in closed_set:
                open_set.add(m)
                parents[m] = n
                g[m] = g[n] + weight
            else:
                if g[m] > g[n] + weight:
                    g[m] = g[n] + weight
                    parents[m] = n

                    if m in closed_set:
                        closed_set.remove(m)
                        open_set.add(m)

        open_set.remove(n)
        closed_set.add(n)

    print("Path does not exist.")
    return None, None


def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None


def heuristic(n):
    goal = (4,4)
    return math.sqrt((goal[0] - n[0]) ** 2 + (goal[1] - n[1]) ** 2)


Graph_nodes_normal = {
    (0, 0): [((0, 1), 1), ((1, 0), 4)],
    (0, 1): [((0, 2), 3), ((1, 1), 1)],
    (0, 2): [((0, 3), 2), ((1, 2), 2)],
    (0, 3): [((0, 4), 5), ((1, 3), 3)],
    (0, 4): [((1, 4), 1)],

    (1, 0): [((0, 0), 4), ((1, 1), 1), ((2, 0), 2)],
    (1, 1): [((0, 1), 1), ((1, 2), 1), ((2, 1), 3)],
    (1, 2): [((0, 2), 2), ((1, 3), 2), ((2, 2), 1)],
    (1, 3): [((0, 3), 3), ((1, 4), 2), ((2, 3), 1)],
    (1, 4): [((0, 4), 1), ((2, 4), 4)],

    (2, 0): [((1, 0), 2), ((2, 1), 2), ((3, 0), 3)],
    (2, 1): [((1, 1), 3), ((2, 2), 1), ((3, 1), 1)],
    (2, 2): [((1, 2), 1), ((2, 3), 1), ((3, 2), 2)],
    (2, 3): [((1, 3), 1), ((2, 4), 2), ((3, 3), 3)],
    (2, 4): [((1, 4), 4), ((3, 4), 2)],

    (3, 0): [((2, 0), 3), ((3, 1), 2), ((4, 0), 4)],
    (3, 1): [((2, 1), 1), ((3, 2), 1), ((4, 1), 3)],
    (3, 2): [((2, 2), 2), ((3, 3), 1), ((4, 2), 2)],
    (3, 3): [((2, 3), 3), ((3, 4), 1), ((4, 3), 1)],
    (3, 4): [((2, 4), 2), ((4, 4), 3)],

    (4, 0): [((3, 0), 4), ((4, 1), 1)],
    (4, 1): [((3, 1), 3), ((4, 2), 2)],
    (4, 2): [((3, 2), 2), ((4, 3), 1)],
    (4, 3): [((3, 3), 1), ((4, 4), 2)],
    (4, 4): [((3, 4), 3)]
}

Graph_nodes_heavy = {
    (0, 0): [((0, 1), 6), ((1, 0), 8)],
    (0, 1): [((0, 2), 9), ((1, 1), 6)],
    (0, 2): [((0, 3), 8), ((1, 2), 7)],
    (0, 3): [((0, 4), 12), ((1, 3), 9)],
    (0, 4): [((1, 4), 6)],

    (1, 0): [((0, 0), 8), ((1, 1), 6), ((2, 0), 7)],
    (1, 1): [((0, 1), 6), ((1, 2), 7), ((2, 1), 10)],
    (1, 2): [((0, 2), 7), ((1, 3), 9), ((2, 2), 8)],
    (1, 3): [((0, 3), 9), ((1, 4), 8), ((2, 3), 10)],
    (1, 4): [((0, 4), 6), ((2, 4), 10)],

    (2, 0): [((1, 0), 7), ((2, 1), 6), ((3, 0), 9)],
    (2, 1): [((1, 1), 10), ((2, 2), 9), ((3, 1), 8)],
    (2, 2): [((1, 2), 8), ((2, 3), 9), ((3, 2), 10)],
    (2, 3): [((1, 3), 10), ((2, 4), 7), ((3, 3), 11)],
    (2, 4): [((1, 4), 10), ((3, 4), 9)],

    (3, 0): [((2, 0), 9), ((3, 1), 8), ((4, 0), 12)],
    (3, 1): [((2, 1), 8), ((3, 2), 8), ((4, 1), 9)],
    (3, 2): [((2, 2), 10), ((3, 3), 9), ((4, 2), 8)],
    (3, 3): [((2, 3), 11), ((3, 4), 8), ((4, 3), 7)],
    (3, 4): [((2, 4), 9), ((4, 4), 10)],

    (4, 0): [((3, 0), 12), ((4, 1), 7)],
    (4, 1): [((3, 1), 9), ((4, 2), 8)],
    (4, 2): [((3, 2), 8), ((4, 3), 6)],
    (4, 3): [((3, 3), 7), ((4, 4), 8)],
    (4, 4): [((3, 4), 10)]
}

Graph_nodes_reduced = {
    (0, 0): [((0, 1), 1), ((1, 0), 2)],
    (0, 1): [((0, 2), 2), ((1, 1), 1)],
    (0, 2): [((0, 3), 1), ((1, 2), 1)],
    (0, 3): [((0, 4), 3), ((1, 3), 2)],
    (0, 4): [((1, 4), 1)],

    (1, 0): [((0, 0), 2), ((1, 1), 1), ((2, 0), 2)],
    (1, 1): [((0, 1), 1), ((1, 2), 1), ((2, 1), 2)],
    (1, 2): [((0, 2), 1), ((1, 3), 1), ((2, 2), 1)],
    (1, 3): [((0, 3), 2), ((1, 4), 2), ((2, 3), 1)],
    (1, 4): [((0, 4), 1), ((2, 4), 3)],

    (2, 0): [((1, 0), 2), ((2, 1), 1), ((3, 0), 3)],
    (2, 1): [((1, 1), 2), ((2, 2), 1), ((3, 1), 1)],
    (2, 2): [((1, 2), 1), ((2, 3), 1), ((3, 2), 2)],
    (2, 3): [((1, 3), 1), ((2, 4), 2), ((3, 3), 2)],
    (2, 4): [((1, 4), 3), ((3, 4), 2)],

    (3, 0): [((2, 0), 3), ((3, 1), 2), ((4, 0), 4)],
    (3, 1): [((2, 1), 1), ((3, 2), 1), ((4, 1), 2)],
    (3, 2): [((2, 2), 2), ((3, 3), 1), ((4, 2), 2)],
    (3, 3): [((2, 3), 2), ((3, 4), 1), ((4, 3), 1)],
    (3, 4): [((2, 4), 2), ((4, 4), 2)],

    (4, 0): [((3, 0), 4), ((4, 1), 1)],
    (4, 1): [((3, 1), 2), ((4, 2), 2)],
    (4, 2): [((3, 2), 2), ((4, 3), 1)],
    (4, 3): [((3, 3), 1), ((4, 4), 2)],
    (4, 4): [((3, 4), 2)]
}


def run_scenario(graph_nodes, scenario_name):
    global Graph_nodes
    Graph_nodes = graph_nodes
    print(f"\nRunning A* for {scenario_name}:")
    path, total_cost = aStarAlgo((0, 0), (4, 4))
    if path is not None:
        print(f"Path: {path}")
        print(f"Total Travel Time: {total_cost} minutes")
    else:
        print("No valid path found.")


if __name__ == "__main__":
    run_scenario(Graph_nodes_normal, "Normal Traffic Conditions")
    run_scenario(Graph_nodes_reduced, "Reduced Traffic Conditions")
    run_scenario(Graph_nodes_heavy, "Heavy")
